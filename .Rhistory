<<<<<<< HEAD
add_trace(
z = extras$GDP..BILLIONS.
) %>%
layout(
geo = g
)
plot_geo(extras) %>%
add_trace(
z = ~GDP..BILLIONS., color = ~GDP..BILLIONS., colors = 'Blues',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
) %>%
layout(
geo = g
)
p2 <- plot_geo(extras) %>%
add_trace(
z = ~GDP..BILLIONS., color = ~GDP..BILLIONS., colors = 'Blues',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
) %>%
layout(
geo = g
)
p3 <- subplot(p1, p2)
#map projection/options
g <- list (
showframe = FALSE,
showcoastlines = FALSE,
showcountries = TRUE,
projection = list(type = "Mercator")
)
#graph
p1 <- plot_geo(twenty12) %>%
add_trace(
z = twenty12$Medals, color = twenty12$Medals, colors = "Blues",
text = twenty12$Country, locations = twenty12$Code, marker = list(line = l)
) %>%
colorbar(title = "Medals by country") %>%
layout(
title = "Medals by Country",
geo = g
)
View(p1)
#graph
plot_geo(twenty12) %>%
add_trace(
z = twenty12$Medals, color = twenty12$Medals, colors = "Blues",
text = twenty12$Country, locations = twenty12$Code, marker = list(line = l)
) %>%
colorbar(title = "Medals by country") %>%
layout(
title = "Medals by Country",
geo = g
)
#border
l <- list(color = toRGB("black"), width = 0.5)
#map projection/options
g <- list (
showframe = FALSE,
showcoastlines = FALSE,
showcountries = TRUE,
projection = list(type = "Mercator")
)
#graph
plot_geo(twenty12) %>%
add_trace(
z = twenty12$Medals, color = twenty12$Medals, colors = "Blues",
text = twenty12$Country, locations = twenty12$Code, marker = list(line = l)
) %>%
colorbar(title = "Medals by country") %>%
layout(
title = "Medals by Country",
geo = g
)
View(sorted_summer)
runApp('Nick')
runApp('Nick')
runApp('Nick')
library(shiny)
library(rsconnect)
library(plotly)
runApp('Nick')
runApp('Nick')
runApp('Nick')
summer_data <- read.csv("data/summer.csv")
runApp('Nick')
runApp('Nick')
runApp('Nick')
runApp('Nick')
runApp('Nick')
runApp('Nick')
runApp('Nick')
runApp('Nick')
runApp('Nick')
runApp('Nick')
runApp('Nick')
plot_geo(df) %>%
add_trace(
z = df$Medals, color = df$Medals, colors = "Blues",
text = df$Country, locations = df$Code, marker = list(line = list(color = toRGB("black"), width = 0.5))
) %>%
colorbar(title = "Number of Medals") %>%
layout(
title = "Total Olympic Medals Won for Each Country",
geo = list(showframe = FALSE,
showcoastlines = FALSE,
showcountries = TRUE,
projection = list(type = "Mercator")
)
)
runApp('Nick')
runApp('Nick')
runApp('Nick')
deployApp()
#graph
plot_geo(twenty12) %>%
add_trace(
z = twenty12$Medals, color = twenty12$Medals, colors = "Blues",
text = twenty12$Country, locations = twenty12$Code, marker = list(line = l)
) %>%
colorbar(title = "Medals by country") %>%
layout(
title = "Medals by Country",
geo = g
)
source('~/College/Winter 2018/INFO 201/Final Project/info201-Final-Project/Nick/nick_help.R')
#graph
plot_geo(twenty12) %>%
add_trace(
z = twenty12$Medals, color = twenty12$Medals, colors = "Blues",
text = twenty12$Country, locations = twenty12$Code, marker = list(line = l)
) %>%
colorbar(title = "Medals by country") %>%
layout(
title = "Medals by Country",
geo = g
)
twenty12 <- filter(combined_summer, Year == 1896)
twenty12 <- left_join(dictionary_data, twenty12, by = "Code")
#graph
plot_geo(twenty12) %>%
add_trace(
z = twenty12$Medals, color = twenty12$Medals, colors = "Blues",
text = twenty12$Country, locations = twenty12$Code, marker = list(line = l)
) %>%
colorbar(title = "Medals by country") %>%
layout(
title = "Medals by Country",
geo = g
)
for (i in 1:nrow(twenty12)) {
if (is.na(twenty12[i,"Medals"])) {
twenty12[i, "Medals"] <- 0
}
}
#border
l <- list(color = toRGB("black"), width = 0.5)
#map projection/options
g <- list (
showframe = FALSE,
showcoastlines = FALSE,
showcountries = TRUE,
projection = list(type = "Mercator")
)
#graph
plot_geo(twenty12) %>%
add_trace(
z = twenty12$Medals, color = twenty12$Medals, colors = "Blues",
text = twenty12$Country, locations = twenty12$Code, marker = list(line = l)
) %>%
colorbar(title = "Medals by country") %>%
layout(
title = "Medals by Country",
geo = g
)
twenty12 <- filter(combined_summer, Year == 1940)
twenty12 <- left_join(dictionary_data, twenty12, by = "Code")
for (i in 1:nrow(twenty12)) {
if (is.na(twenty12[i,"Medals"])) {
twenty12[i, "Medals"] <- 0
}
}
#border
l <- list(color = toRGB("black"), width = 0.5)
#map projection/options
g <- list (
showframe = FALSE,
showcoastlines = FALSE,
showcountries = TRUE,
projection = list(type = "Mercator")
)
#graph
plot_geo(twenty12) %>%
add_trace(
z = twenty12$Medals, color = twenty12$Medals, colors = "Blues",
text = twenty12$Country, locations = twenty12$Code, marker = list(line = l)
) %>%
colorbar(title = "Medals by country") %>%
layout(
title = "Medals by Country",
geo = g
)
twenty12 <- filter(combined_summer, Year == 1936)
twenty12 <- left_join(dictionary_data, twenty12, by = "Code")
for (i in 1:nrow(twenty12)) {
if (is.na(twenty12[i,"Medals"])) {
twenty12[i, "Medals"] <- 0
}
}
#border
l <- list(color = toRGB("black"), width = 0.5)
#map projection/options
g <- list (
showframe = FALSE,
showcoastlines = FALSE,
showcountries = TRUE,
projection = list(type = "Mercator")
)
#graph
plot_geo(twenty12) %>%
add_trace(
z = twenty12$Medals, color = twenty12$Medals, colors = "Blues",
text = twenty12$Country, locations = twenty12$Code, marker = list(line = l)
) %>%
colorbar(title = "Medals by country") %>%
layout(
title = "Medals by Country",
geo = g
)
twenty12 <- filter(combined_summer, Year == 1996)
twenty12 <- left_join(dictionary_data, twenty12, by = "Code")
for (i in 1:nrow(twenty12)) {
if (is.na(twenty12[i,"Medals"])) {
twenty12[i, "Medals"] <- 0
}
}
#map projection/options
g <- list (
showframe = FALSE,
showcoastlines = FALSE,
showcountries = TRUE,
projection = list(type = "Mercator")
)
#border
l <- list(color = toRGB("black"), width = 0.5)
#graph
plot_geo(twenty12) %>%
add_trace(
z = twenty12$Medals, color = twenty12$Medals, colors = "Blues",
text = twenty12$Country, locations = twenty12$Code, marker = list(line = l)
) %>%
colorbar(title = "Medals by country") %>%
layout(
title = "Medals by Country",
geo = g
)
#graph
plot_geo(twenty12) %>%
add_trace(
z = twenty12$Medals, color = twenty12$Medals, colors = "Blues",
text = twenty12$Code, locations = twenty12$Code, marker = list(line = l)
) %>%
colorbar(title = "Medals by country") %>%
layout(
title = "Medals by Country",
geo = g
)
#graph
plot_geo(twenty12) %>%
add_trace(
z = twenty12$Medals, color = twenty12$Medals, colors = "Blues",
text = twenty12$Country, locations = twenty12$Code, marker = list(line = l)
) %>%
colorbar(title = "Medals by country") %>%
layout(
title = "Medals by Country",
geo = g
)
#graph
plot_geo(twenty12) %>%
add_trace(
z = twenty12$Medals, color = twenty12$Medals, colors = "Blues",
text = twenty12$Country, locations = twenty12$Country, marker = list(line = l)
) %>%
colorbar(title = "Medals by country") %>%
layout(
title = "Medals by Country",
geo = g
)
#graph
plot_geo(twenty12) %>%
add_trace(
z = twenty12$Medals, color = twenty12$Medals, colors = "Blues",
text = twenty12$Code, locations = twenty12$Country, marker = list(line = l)
) %>%
colorbar(title = "Medals by country") %>%
layout(
title = "Medals by Country",
geo = g
)
#graph
plot_geo(twenty12) %>%
add_trace(
z = twenty12$Medals, color = twenty12$Medals, colors = "Blues",
text = twenty12$Country, locations = twenty12$Code, marker = list(line = l)
) %>%
colorbar(title = "Medals by country") %>%
layout(
title = "Medals by Country",
geo = g
)
twenty12 <- filter(combined_summer, Year == 1996)
twenty12 <- left_join(dictionary_data, twenty12, by = "Code")
for (i in 1:nrow(twenty12)) {
if (is.na(twenty12[i,"Medals"])) {
twenty12[i, "Medals"] <- 0
}
}
#graph
plot_geo(twenty12) %>%
add_trace(
z = twenty12$Medals, color = twenty12$Medals, colors = "Blues",
text = twenty12$Country, locations = df$Code, marker = list(line = l)
) %>%
colorbar(title = "Medals by country") %>%
layout(
title = "Medals by Country",
geo = g
)
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_ebola.csv')
View(df)
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_world_gdp_with_codes.csv')
#graph
plot_geo(twenty12) %>%
add_trace(
z = twenty12$Medals, color = twenty12$Medals, colors = "Blues",
text = twenty12$Country, locations = df$CODE, marker = list(line = l)
) %>%
colorbar(title = "Medals by country") %>%
layout(
title = "Medals by Country",
geo = g
)
runApp('Nick')
runApp('Nick')
runApp('Nick')
twenty12[71, "Medals"] <- "DEU"
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_world_gdp_with_codes.csv')
summer_data <- read.csv("data/summer.csv")
dictionary_data <- read.csv("data/dictionary.csv")
sorted_summer <- summer_data %>%
group_by(Year, Country) %>%
summarise("Medals" = n())
colnames(sorted_summer)[colnames(sorted_summer) == "Country"] <- "Code"
combined_summer <- left_join(sorted_summer, dictionary_data, by = "Code")
twenty12 <- filter(combined_summer, Year == 1996)
twenty12 <- left_join(dictionary_data, twenty12, by = "Code")
for (i in 1:nrow(twenty12)) {
if (is.na(twenty12[i,"Medals"])) {
twenty12[i, "Medals"] <- 0
}
}
twenty12[71, "Code"] <- "DEU"
#border
l <- list(color = toRGB("black"), width = 0.5)
#map projection/options
g <- list (
showframe = FALSE,
showcoastlines = FALSE,
showcountries = TRUE,
projection = list(type = "Mercator")
)
#graph
plot_geo(twenty12) %>%
add_trace(
z = twenty12$Medals, color = twenty12$Medals, colors = "Blues",
text = twenty12$Country, locations = df$CODE, marker = list(line = l)
) %>%
colorbar(title = "Medals by country") %>%
layout(
title = "Medals by Country",
geo = g
)
plot_geo(df) %>%
add_trace(
z = df$GDP..BILLIONS., color = df$GDP..BILLIONS., colors = "Greens",
text = df$COUNTRY, locations = df$CODE, marker = list(line = l)
) %>%
colorbar(title = "GDP") %>%
layout(
title = "GDP",
geo = g
)
#graph
plot_geo(twenty12) %>%
add_trace(
z = twenty12$Medals, color = twenty12$Medals, colors = "Blues",
text = twenty12$Country, locations = twenty12$Code, marker = list(line = l)
) %>%
colorbar(title = "Medals by country") %>%
layout(
title = "Medals by Country",
geo = g
)
View(df)
head(df, 300)
dictionary_data <- read.csv("data/dictionary2.csv")
=======
library(dplyr)
dictionary <- read.csv("dictionary.csv", stringsAsFactors = FALSE)
setwd("~/Desktop/INFO_201/Assignments/info201-Final-Project")
dictionary <- read.csv("dictionary.csv", stringsAsFactors = FALSE)
winter <- read.csv("winter.csv", stringsAsFactors = FALSE)
dictionary <- read.csv("data/dictionary.csv", stringsAsFactors = FALSE)
winter <- read.csv("data/winter.csv", stringsAsFactors = FALSE)
summer <- read.csv("data/summer.csv", stringsAsFactors = FALSE)
View(summer)
sort_winter <- winter %>%
group_by(Country) %>%
count(Country) %>%
mutate(Code = Country)
View(sort_winter)
shiny::runApp('~/Desktop/INFO_201/Excersises/ch16-shiny/exercise-5')
runApp('~/Desktop/INFO_201/Excersises/ch16-shiny/exercise-4')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library("shiny")
library("ggplot2")
library("dplyr")
library("rsconnect")
library("plotly")
shinyServer(function(input, output) {
#----------------From here (K)---------------------------------
## read and organize data I need
summer <- read.csv("data/summer.csv", stringsAsFactors = FALSE)
all_country <- sort(unique(summer$Country))
code <- read.csv("data/dictionary.csv", stringsAsFactors = FALSE)
code[202, ]=c("The IOC country code for mixed teams at the Olympics", "ZZX")
output$plot <- renderPlot({
## make a df which depends on user experience
plot.data <- summer %>%
filter(summer$Discipline == input$sports, summer$Year == input$period) %>%
mutate(AAA = paste(Country, Medal)) %>%
group_by(Country, Medal, AAA) %>%
count()
## show data only when there is data to show
if (is.na(plot.data)) {
return("")
} else {
ggplot(plot.data, aes(x=Country, y=n, fill = Medal)) +
geom_histogram(stat="identity") +
scale_fill_manual(values = alpha(c("#ac6b25", "#ffd700", "#c0c0c0"), 0.7)) +
geom_text(aes(label = n), position = position_stack(vjust = 0.5), color = "white") +
labs(y = "Number of medals") +
coord_flip()
}
})
## search what abbriviation means
output$userText <- renderText({
code.data <- code %>%
filter(Code == toupper(input$text))
return(paste0(input$text, " = ", code.data$Country))
})
#----------------------to here (K)-------------------------
#----------------------from here (Nick)---------------------
summer_data <- read.csv("Nick/NickData/summer2.csv")
dictionary_data <- read.csv("Nick/NickData/dictionary2.csv")
>>>>>>> 216e7679706a72bed2c59629b332789a9f74cff4
sorted_summer <- summer_data %>%
group_by(Year, Country) %>%
summarise("Medals" = n())
colnames(sorted_summer)[colnames(sorted_summer) == "Country"] <- "Code"
<<<<<<< HEAD
combined_summer <- left_join(sorted_summer, dictionary_data, by = "Code")
twenty12 <- filter(combined_summer, Year == 1996)
twenty12 <- left_join(dictionary_data, twenty12, by = "Code")
for (i in 1:nrow(twenty12)) {
if (is.na(twenty12[i,"Medals"])) {
twenty12[i, "Medals"] <- 0
}
}
twenty12[71, "Code"] <- "DEU"
#border
l <- list(color = toRGB("black"), width = 0.5)
#map projection/options
g <- list (
showframe = FALSE,
showcoastlines = FALSE,
showcountries = TRUE,
projection = list(type = "Mercator")
)
#graph
plot_geo(twenty12) %>%
add_trace(
z = twenty12$Medals, color = twenty12$Medals, colors = "Blues",
text = twenty12$Country, locations = twenty12$Code, marker = list(line = l)
) %>%
colorbar(title = "Medals by country") %>%
layout(
title = "Medals by Country",
geo = g
)
View(summer_data)
View(dictionary_data)
head(dictionary_data, 300)
dictionary_data <- read.csv("data/dictionary.csv")
head(dictionary_data, 300)
source('~/College/Winter 2018/INFO 201/Final Project/info201-Final-Project/Nick/nick_help.R')
View(dictionary_data)
plot_geo(df) %>%
add_trace(
z = df$GDP..BILLIONS., color = df$GDP..BILLIONS., colors = "Greens",
text = df$COUNTRY, locations = df$CODE, marker = list(line = l)
) %>%
colorbar(title = "GDP") %>%
layout(
title = "GDP",
geo = g
)
#graph
plot_geo(twenty12) %>%
add_trace(
z = twenty12$Medals, color = twenty12$Medals, colors = "Blues",
text = twenty12$Country, locations = twenty12$Code, marker = list(line = l)
) %>%
colorbar(title = "Medals by country") %>%
layout(
title = "Medals by Country",
geo = g
)
summer_data <- read.csv("NickData/summer2.csv")
summer_data <- read.csv("summer2.csv")
summer_data <- read.csv("NickData/summer2.csv")
summer_data <- read.csv("Nick/NickData/summer2.csv")
dictionary_data <- read.csv("Nick/NickData/dictionary2.csv")
runApp('Nick')
runApp('Nick')
runApp('Nick')
runApp('Nick')
runApp('Nick')
=======
sorted_summer <- left_join(sorted_summer, dictionary_data, by = "Code")
output$worldmap <- renderPlotly({
df <- filter(sorted_summer, Year == input$year)
for (i in 1:nrow(df)) {
if (is.na(df[i,"Medals"])) {
df[i, "Medals"] <- 0
}
}
>>>>>>> 216e7679706a72bed2c59629b332789a9f74cff4
plot_geo(df) %>%
add_trace(
z = df$Medals, color = df$Medals, colors = "Blues",
text = df$Country, locations = df$Code, marker = list(line = list(color = toRGB("black"), width = 0.5))
) %>%
<<<<<<< HEAD
colorbar(title = "Number of Medals") %>%
layout(
autosize = F, width = 500, height = 500,
=======
colorbar(title = "Medals", x = 0.75) %>%
layout(
>>>>>>> 216e7679706a72bed2c59629b332789a9f74cff4
title = "Total Olympic Medals Won for Each Country",
geo = list(showframe = FALSE,
showcoastlines = FALSE,
showcountries = TRUE,
projection = list(type = "Mercator")
)
)
<<<<<<< HEAD
#graph
plot_geo(twenty12) %>%
add_trace(
z = twenty12$Medals, color = twenty12$Medals, colors = "Blues",
text = twenty12$Country, locations = twenty12$Code, marker = list(line = l)
) %>%
colorbar(title = "Medals") %>%
layout(
autosize = F, width = 500, height = 500,
title = "Medals by Country",
geo = g
)
runApp('Nick')
runApp('Nick')
runApp('Nick')
runApp('Nick')
runApp('Nick')
runApp('Nick')
runApp('Nick')
runApp('Nick')
=======
})
#---------------------to here (Nick)----------------------
#---------------------from here (Shannon)-----------------
#this will be used to parse the names of the country for selection
summer_locate <- summer %>% group_by(Country) %>% count()
#by filtering through the choice in country, we can break down by location how men and women have won medals
output$Plot <- renderPlot({
summer_country <- summer %>% group_by(Gender, Year, Country) %>% filter(Country == input$country_name) %>% count()
colnames(summer_country)[colnames(summer_country) == 'n'] <- 'Medals'
ggplot(summer_country, aes(x = Year, y = Medals)) +
geom_line(aes(colour = Gender)) +
ggtitle("Medals Won by Men and Women in Each Country", subtitle="This is a comparison of the amount of medals won by men and women in the country of the user's choosing.")
})
#---------------------to here (Shannon)-------------------
})
library("shiny")
library("ggplot2")
library("dplyr")
library("rsconnect")
library("plotly")
summer <- read.csv("data/summer.csv", stringsAsFactors = FALSE)
all_sports <- sort(unique(summer$Discipline))
shinyUI(
navbarPage("Tab",
#--------------Kei-----------------------------------------------------
tabPanel("Kei", titlePanel("Comparing Total Medals"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "sports",
label = "Which sports are you interested in",
choices = all_sports
),
sliderInput(inputId = "period",
label = "What period are you interested in",
min = 1896, max = 2012, value = 2012, step = 4,
ticks = TRUE,
animate = animationOptions(interval = 4000)
),
helpText(h5("Notice: "),
p("There is no such data recorded if the error shows", strong(em("argument is of length zero")))
),
textInput("text", label = h5("Convert abbreviation to actual name"), value = "USA"),
textOutput('userText')
),
mainPanel(
plotOutput("plot")
)
)
),
#---------------------------Nick----------------------------------------
tabPanel("Nick", titlePanel("Nick"),
verticalLayout(
titlePanel("Total Metals Won by Each Country for Every Olympic Year"),
plotlyOutput("worldmap"),
wellPanel(
sliderInput(inputId = "year",
label = "Which year are you intersted in?",
min = 1896, max = 2012, value = 1896, step = 4,
ticks = TRUE,
animate = animationOptions(interval = 4000)
)
)
)
),
#----------------------Shannon-------------------------------------
tabPanel("Medals by Gender", titlePanel("Medals Won by Men and Women in Each Country"),
sidebarLayout(
sidebarPanel(
selectInput("country_name", "Choose a country:", choices = summer_locate$Country, selected = "USA")
),
#Show a plot of the generated distribution
mainPanel(
plotOutput("Plot")
)
)
)
))
shiny::runApp()
shiny::runApp()
runApp()
setwd("~/Desktop/INFO_201/Assignments/info201-Final-Project")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
>>>>>>> 216e7679706a72bed2c59629b332789a9f74cff4
